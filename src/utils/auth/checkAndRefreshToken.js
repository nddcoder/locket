import { jwtDecode } from "jwt-decode";
import axios from "axios";
import { API_URL } from "../API/apiRoutes";
import { saveToken } from "../storage";

/**
 * Ki·ªÉm tra idToken v√† t·ª± ƒë·ªông refresh n·∫øu g·∫ßn h·∫øt h·∫°n
 * @param {string} idToken - JWT token hi·ªán t·∫°i
 * @param {string} refreshToken - Firebase refreshToken
 * @param {number} bufferSeconds - Th·ªùi gian "d·ª± ph√≤ng" (m·∫∑c ƒë·ªãnh 5 ph√∫t)
 * @returns {Promise<string>} idToken m·ªõi n·∫øu ƒë∆∞·ª£c refresh, ho·∫∑c c≈© n·∫øu v·∫´n c√≤n h·∫°n
 */
export const checkAndRefreshIdToken = async (
  idToken,
  refreshToken,
  bufferSeconds = 300
) => {
  if (!idToken || typeof idToken !== "string") return null;

  const parts = idToken.split(".");
  if (parts.length !== 3) {
    console.error("‚ùå idToken kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JWT:", idToken);
    return null;
  }

  try {
    const decoded = jwtDecode(idToken);
    if (!decoded.exp) return null;

    const currentTime = Date.now() / 1000;
    const timeLeft = decoded.exp - currentTime;

    console.log(
      `‚è≥ Token c√≤n h·∫°n kho·∫£ng ${Math.max(0, Math.floor(timeLeft))} gi√¢y`
    );

    if (decoded.exp > currentTime + bufferSeconds) {
      return idToken; // Token c√≤n ƒë·ªß h·∫°n d√πng
    }

    // Token s·∫Øp h·∫øt h·∫°n ‚Üí g·ªçi refresh
    console.log("üîÑ Token s·∫Øp h·∫øt h·∫°n, ƒëang g·ªçi refresh...");
    const res = await axios.post(API_URL.REFESH_TOKEN_URL, {
      refreshToken,
    });

    const updatedTokens = {
      idToken: res?.data?.data?.id_token,
      refreshToken: res?.data?.refresh_token || refreshToken,
      localId: res?.data?.data?.user_id,
    };

    saveToken(updatedTokens);
    return updatedTokens.idToken;
  } catch (err) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra ho·∫∑c refresh token:", err);
    return null;
  }
};
export const checkAndRefreshIdTokenV2 = async (
  idToken,
  refreshToken,
  bufferSeconds = 300
) => {
  if (!idToken || typeof idToken !== "string") return null;

  const parts = idToken.split(".");
  if (parts.length !== 3) {
    console.error("‚ùå idToken kh√¥ng ƒë√∫ng ƒë·ªãnh d·∫°ng JWT:", idToken);
    return null;
  }

  try {
    const decoded = jwtDecode(idToken);
    if (!decoded.exp) return null;

    const currentTime = Date.now() / 1000;
    const timeLeft = decoded.exp - currentTime;

    console.log(
      `‚è≥ Token c√≤n h·∫°n kho·∫£ng ${Math.max(0, Math.floor(timeLeft))} gi√¢y`
    );

    if (decoded.exp > currentTime + bufferSeconds) {
      return idToken; // Token c√≤n ƒë·ªß h·∫°n d√πng
    }

    // Token s·∫Øp h·∫øt h·∫°n ‚Üí g·ªçi refresh
    console.log("üîÑ Token s·∫Øp h·∫øt h·∫°n, ƒëang g·ªçi refresh...");
    const res = await axios.post(API_URL.REFESH_TOKEN_URL, {
      refreshToken,
    });

    const updatedTokens = {
      idToken: res?.data?.data?.id_token,
      refreshToken: res?.data?.refresh_token || refreshToken,
      localId: res?.data?.data?.user_id,
    };

    saveToken(updatedTokens);
    return updatedTokens;
  } catch (err) {
    console.error("‚ùå L·ªói khi ki·ªÉm tra ho·∫∑c refresh token:", err);
    return null;
  }
};