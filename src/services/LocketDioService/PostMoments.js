import axios from "axios";
import * as utils from "../../utils";

export const uploadMedia = async (formData, setUploadProgress) => {
  let timeOutId;
  try {
    const fileType = formData.get("images") ? "image" : "video";

    // Th·ªùi gian ch·ªù t√πy v√†o lo·∫°i file
    timeOutId = setTimeout(
      () => {
        console.log("‚è≥ Uploading is taking longer than expected...");
      },
      fileType === "image" ? 5000 : 10000
    );

    const response = await axios.post(
      utils.API_URL.UPLOAD_MEDIA_URL,
      formData,
      {
        headers: { "Content-Type": "multipart/form-data" },
        onUploadProgress: (progressEvent) => {
          if (setUploadProgress && typeof setUploadProgress === "function") {
            const percent = Math.round(
              (progressEvent.loaded * 100) / progressEvent.total
            );
            let currentProgress = 0;
            if (percent > currentProgress) {
              const updateProgress = (target) => {
                if (currentProgress < target) {
                  currentProgress += 1;
                  setUploadProgress(currentProgress);
                  setTimeout(() => updateProgress(target), 50);
                }
              };
              updateProgress(percent);
            }
          }
        },
      }
    );

    clearTimeout(timeOutId);
    console.log("‚úÖ Upload th√†nh c√¥ng:", response.data);
    return response.data;
  } catch (error) {
    clearTimeout(timeOutId);

    // Log l·ªói chi ti·∫øt h∆°n
    console.error("‚ùå L·ªói khi upload:", error.response?.data || error.message);

    if (error.response) {
      // X·ª≠ l√Ω l·ªói t·ª´ server
      console.error("Server Error:", error.response);
    } else {
      // X·ª≠ l√Ω l·ªói k·∫øt n·ªëi ho·∫∑c kh√°c
      console.error("Network Error:", error.message);
    }

    throw error;
  }
};
export const uploadMediaV2 = async (payload) => {
  try {
    // L·∫•y mediaInfo t·ª´ payload
    const { mediaInfo } = payload;
    // L·∫•y type t·ª´ mediaInfo ƒë·ªÉ x√°c ƒë·ªãnh l√† ·∫£nh hay video
    const fileType = mediaInfo.type;

    // ƒê·∫∑t timeout t√πy theo lo·∫°i t·ªáp (·∫£nh ho·∫∑c video)
    const timeoutDuration =
      fileType === "image" ? 5000 : fileType === "video" ? 10000 : 5000;
    const timeoutId = setTimeout(() => {
      console.log("‚è≥ Uploading is taking longer than expected...");
    }, timeoutDuration);

    // G·ª≠i request v·ªõi payload v√† header Content-Type: application/json
    const response = await axios.post(utils.API_URL.UPLOAD_MEDIA_URL, payload, {
      headers: {
        "Content-Type": "application/json", // S·ª≠ d·ª•ng JSON thay v√¨ FormData
      },
    });

    clearTimeout(timeoutId); // H·ªßy timeout khi upload th√†nh c√¥ng
    console.log("‚úÖ Upload th√†nh c√¥ng:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi upload:", error.response?.data || error.message);

    if (error.response) {
      console.error("üì° Server Error:", error.response);
    } else {
      console.error("üåê Network Error:", error.message);
    }

    throw error;
  }
};
export const PostMoments = async (payload) => {
  try {
    // L·∫•y mediaInfo t·ª´ payload
    const { mediaInfo } = payload;
    // L·∫•y type t·ª´ mediaInfo ƒë·ªÉ x√°c ƒë·ªãnh l√† ·∫£nh hay video
    const fileType = mediaInfo.type;

    // ƒê·∫∑t timeout t√πy theo lo·∫°i t·ªáp (·∫£nh ho·∫∑c video)
    const timeoutDuration =
      fileType === "image" ? 10000 : fileType === "video" ? 15000 : 5000;
    const timeoutId = setTimeout(() => {
      console.log("‚è≥ Uploading is taking longer than expected...");
    }, timeoutDuration);

    // G·ª≠i request v·ªõi payload v√† header Content-Type: application/json
    const response = await axios.post(utils.API_URL.UPLOAD_MEDIA_URL_V2, payload, {
      headers: {
        "Content-Type": "application/json", // S·ª≠ d·ª•ng JSON thay v√¨ FormData
      },
    });

    clearTimeout(timeoutId); // H·ªßy timeout khi upload th√†nh c√¥ng
    console.log("‚úÖ Upload th√†nh c√¥ng:", response.data);
    return response.data;
  } catch (error) {
    console.error("‚ùå L·ªói khi upload:", error.response?.data || error.message);

    if (error.response) {
      console.error("üì° Server Error:", error.response);
    } else {
      console.error("üåê Network Error:", error.message);
    }

    throw error;
  }
};
